<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>COSProject 技术笔记</title>
  
  <subtitle>对新的技术有追求，关注后端动态；喜欢 coding，热爱开源。</subtitle>
  <link href="https://bytestruct.com/atom.xml" rel="self"/>
  
  <link href="https://bytestruct.com/"/>
  <updated>2021-03-21T13:46:29.360Z</updated>
  <id>https://bytestruct.com/</id>
  
  <author>
    <name>binaryCodeSequence</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 内存模型</title>
    <link href="https://bytestruct.com/2021/03/16/java-memory-model/"/>
    <id>https://bytestruct.com/2021/03/16/java-memory-model/</id>
    <published>2021-03-16T02:46:05.000Z</published>
    <updated>2021-03-21T13:46:29.360Z</updated>
    
    <content type="html"><![CDATA[<p>Java 虚拟机内部使用 Java 内存模型将内存划分为两个逻辑单元，<strong>线程栈</strong>和<strong>堆</strong>。</p><p><img src="./java-memory-model-1.png"></p><p>在 Java 虚拟机中，每一个线程都有属于自己的线程栈，而线程栈会存储被调用的方法和这些方法的局部变量(基本类型和引用类型)，假设有下面这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本类型</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 引用类型</span></span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当两个独立的线程调用同一个方法时(不管是不是同一个对象的)，<strong>每个线程都会在各自的线程栈中创建局部变量的副本</strong>，对于基本数据类型(boolean、byte、short、char、int、long、float、double) 都是直接创建副本到线程栈中，而对于引用类型( Byte、Integer、Long 等) 它的引用(就是变量名<code>test</code>) 是存储在线程栈中，对象本身(就是<code>Test</code>这个对象) 是存储在堆中的(就是说对象都是存储在堆上)；并且每个线程只能访问自己的线程栈(就是说对其它线程不可见)。注意：这里说的是每个方法，方法 A 调用方法 B 时，当前线程栈会保存这两个被调用的方法以及这些方法的局部变量。</p><p>但是，对于对象的成员变量不管是基本类型还是引用类型，这些成员变量和对象本身(包括静态类)都是存储在堆上的；只要一个线程有对该对象的引用，那么这个线程就能访问堆上的对象，并且也能够访问该对象的成员变量，但每个线程都有自己的局部变量副本。</p><p>个人理解是：方法中使用了成员变量，那么就会创建这成员变量的副本存储到线程栈中。</p><p>下面这张图说明了上述几点：</p><p><img src="./java-memory-model-3.png"></p><p>有两个线程，它们分别有一组局部变量，其中局部变量 Local Variable 2 都指向堆上的同一个共享对象(Object 3)；这两个线程各自对同一个对象有一个不同的引用，它们的引用都是局部变量，因此会存储在每个线程的线程栈中；并且都可以通过 Object 3 中的成员变量的引用，使这两个线程可以访问 Object 2 和 Object 4。</p><p>上图中还展示了一个局部变量，它们分别指向堆上的两个不同对象(Object 1 和 Object 5)，而不是同一个对象；所以，一个线程不能访问 Object 1，另一个线程不能访问 Object 5。</p><p>下面的代码描述了上述内存图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class MyRunnable implements <span class="title">Runnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        methodOne();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> localVariable1 = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line">        MySharedObject localVariable2 = MySharedObject.sharedInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//... do more with local variables.</span></span><br><span class="line"></span><br><span class="line">        methodTwo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer localVariable1 = <span class="keyword">new</span> Integer(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//... do more with local variable.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySharedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static variable pointing to instance of MySharedObject</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MySharedObject sharedInstance = <span class="keyword">new</span> MySharedObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//member variables pointing to two objects on the heap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer object2 = <span class="keyword">new</span> Integer(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">public</span> Integer object4 = <span class="keyword">new</span> Integer(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> member1 = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> member2 = <span class="number">67890</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个执行 methodOne() 的线程都会在各自的线程栈上创建自己的 localVariable1 和 localVariable2 的副本；localVariable1 副本之间将完全分离，只活在每个线程的线程栈上；<strong>一个线程不能看到另一个线程对 localVariable1 的做了什么改变</strong>。</p><p>localVariable2 之间也是完全分离的，但是这两个不同副本最终都指向静态变量所引用的对象(堆上的同一个对象)。<strong>静态变量只有一个副本</strong>，这个副本存储在堆上；因此，localVariable2 的两个副本最终都指向静态变量指向的 MySharedObject。MySharedObject 实例也存储在堆上。它对应于上图中的 Object 3。</p><p>注意 MySharedObject 类也包含了四个成员变量，这些成员变量和对象一起存储在堆上，其中两个成员变量指向另外两个 Integer 对象，这些 Integer 对象对应上图中的 Object 2 和 Object 4。</p><p>在 methodTwo() 方法中创建了一个名为 localVariable1 的局部变量，这个局部变量是对 Integer 对象的引用，localVariable1 引用将在每个执行 methodTwo() 的线程中存储一个副本；但是由于该方法每次执行时都会创建一个新的 Integer 对象，所以 localVariable1 引用指向一个新的 Integer 实例，对应上图中的 Object 1 和 Object 5。</p><h2 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h2><p>现代硬件内存架构与 Java 内部的内存模型有一定的区别。了解硬件内存架构也是很重要的，要了解 Java 内存模型是如何与之合作的。</p><p><img src="./java-memory-model-4.png"></p><p>现在的计算机中往往有 2 个或更多的 CPU，这些 CPU 都有多个核心，每个 CPU 在任何时候都能够运行一个线程或同时运行多个线程；这意味着，如果你的 Java 应用程序是多线程的，那么每个 CPU 所执行的线程，可能在你的 Java 应用程序中同时(并发) 运行。</p><p>每个 CPU 都包含一组寄存器，这些寄存器基本上是 CPU 内的内存。CPU 在这些寄存器上执行操作的速度比在主内存中的变量上执行操作的速度快得多。这是因为 CPU 访问这些寄存器的速度比访问主内存的速度快得多。</p><blockquote><p>计算机中都一个或多个内存(RAM) 也就是主内存区，所有的 CPU 都可以访问主内存，主内存区域通常比 CPU 的缓存存储器大得多。</p></blockquote><p>每个CPU还可能有一个CPU高速缓存存储器层。事实上，大多数现代CPU都有一定规模的高速缓存存储器层。CPU访问其缓存存储器的速度比主存储器快得多，但通常没有访问其内部寄存器的速度快。所以，CPU的高速缓存存储器的速度介于内部寄存器和主存储器的速度之间。有些CPU可能有多个缓存层（Level 1和Level 2），但这并不是那么重要，要了解Java内存模型如何与内存交互。重要的是要知道CPU可以有某种形式的缓存内存层。</p><p>通常情况下，当一个 CPU 需要访问主内存时，它将把主内存的一部分数据读到它的 CPU 缓存中。它甚至可能将缓存的一部分读入其内部寄存器中，然后对其进行操作。当 CPU 需要将结果写回主内存时，它会将其内部寄存器中的值冲到缓存中，并在某一时刻将该值冲回主内存。</p><p>当CPU需要在缓存存储器中存储其他东西时，缓存存储器中存储的值通常会被冲回主存储器。CPU缓存一次可以有数据写入部分内存，一次可以有部分内存被刷新。它不必每次更新时都要读/写全部缓存。通常，缓存是以较小的内存块更新的，称为 “缓存线”。一条或多条缓存线可以被读入缓存内存，一条或多条缓存线可以再次被刷新回主内存。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://tutorials.jenkov.com/java-concurrency/java-memory-model.html">Java Memory Model</a></p><p><a href="https://www.educative.io/edpresso/what-is-the-java-memory-model">What is the Java memory model?</a></p><p><a href="https://iamjohnnyzhuang.github.io/java/2016/07/12/Java%E5%A0%86%E5%92%8C%E6%A0%88%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F.html">Java堆和栈看这篇就够</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java 虚拟机内部使用 Java 内存模型将内存划分为两个逻辑单元，&lt;strong&gt;线程栈&lt;/strong&gt;和&lt;strong&gt;堆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./java-memory-model-1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Java 虚拟</summary>
      
    
    
    
    <category term="Java VM" scheme="https://bytestruct.com/categories/Java-VM/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>happens-before 关系</title>
    <link href="https://bytestruct.com/2021/02/28/happens-before/"/>
    <id>https://bytestruct.com/2021/02/28/happens-before/</id>
    <published>2021-02-28T09:05:51.000Z</published>
    <updated>2021-03-16T02:53:31.419Z</updated>
    
    <content type="html"><![CDATA[<p>如果使用 Java 开发多线程应用程序，那么需要了解如何在 Java 程序中处理共享变量。共享变量就是某个变量被多个线程使用，就像 <a href="/2021/02/24/synchronization-and-locks/#Thread-Interference">Synchronization and Locks#Thread-Interference</a> 文章中的实例变量<code>c</code>，当然静态字段和数组元素都是共享变量；除此之外，可以在线程之间共享的内存称为共享内存或堆内存。</p><p>而处理共享变量，一个重要的因素就是 happens-before 关系，但是了解它之前需要先了解<strong>可见性</strong>。</p><blockquote><p>局部变量、形式化方法参数和异常处理程序参数永远不会在线程之间共享，也不会受到内存模型的影响。</p></blockquote><h2 id="Visibility-可见性"><a href="#Visibility-可见性" class="headerlink" title="Visibility(可见性)"></a>Visibility(可见性)</h2><p>现在的 CPU 架构都是多核心，每个核心都能够处理多个执行线程；并且对于每个核心，都存在多个级别的缓存，这些缓存定期与主存协调，如下图所示：</p><p><img src="./cache.jpg"></p><p>针对共享变量的写入操作，会因为每个核心缓存共享变量的值，而导致写入主内存时发生延迟，另一个线程读取到的变量值是个旧值。</p><p>考虑下面这种情况：两个线程对同一个变量执行读和写操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!stopRequested)</span><br><span class="line">                        i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            backgroundThread.start();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            stopRequested = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>backgroundThread</code>线程中一直递增<code>i</code>的值，直到<code>stopRequested</code>变为<code>true</code>。</p><p>理想情况下，程序应该运行 1 秒，在<code>stopRequested</code>变为<code>true</code>后，<code>backgroundThread</code>应该结束，并且整个程序也会终止。但是如果你在多核计算机上运行上述程序，你会发现程序一直在执行而没有被终止；这是因为两个线程运行在两个不同的核心上，<code>stopRequested</code>将被分别加载到对应的核心缓存中，所以主线程修改<code>stopRequested</code>变量值后，不能保证立即对<code>backgroundThread</code>可见，它会无限循环或变量同步到主内存后才会停止。</p><blockquote><p>也就是说第二个线程观察不到第一个线程的操作结果，所以这个操作是不可见的。</p></blockquote><h2 id="Happens-before-relationship"><a href="#Happens-before-relationship" class="headerlink" title="Happens-before relationship"></a>Happens-before relationship</h2><blockquote><p>Java 中对 Happens-before 定义为：<br>如果一个动作 Happens-before 另一个动作，那么第一个是可见的，并且会<strong>排序</strong>在第二个之前排序。<br>也就是说，happens-before 可以<strong>排序</strong>两个动作。</p></blockquote><p>为了更好的理解这句话，首先了解以下重排序(指令重排)；为了提高程序性能 Java VM 和 CPU，在不影响执行结果的前提下都会对代码进行重新排序。假设有下面这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = b + c</span><br><span class="line">d = a + e</span><br><span class="line"></span><br><span class="line">l = m + n</span><br><span class="line">y = x + z</span><br></pre></td></tr></table></figure><p>重排序后，可能会变成下面这个样子，由于前三行没有任何关联(关联指的是变量之间相互依赖，例如第六行代码依赖第一行代码，所以他们之间是有关联的)，CPU 有可能会并行执行前三行，从而提高程序性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = b + c</span><br><span class="line"></span><br><span class="line">l = m + n</span><br><span class="line">y = x + z</span><br><span class="line"></span><br><span class="line">d = a + e</span><br></pre></td></tr></table></figure><p>使用图形展示了重排序和指令执行的情况：</p><p><img src="./1615775396374.png"></p><p>现在来解释 Happens-before 的定义，“一个动作 Happens-before 另一个动作” 这里说的只是两个动作，也就是说没有相互关联的两个动作之间也会存在 Happens-before 关系。</p><p>所以第一行和第三行代码之间是 Happens-before 关系，第一行和第四行之间也是 Happens-before 关系；在上面这四行代码中会存在很多 Happens-before 关系，这里就不一一列举了。</p><p>但是要注意，如果这些代码都是由同一个线程(串行)运行，那么无论怎么重排序，程序的执行结果都不会改变；但是重排序并不保证多线程的执行结果。</p><p>假设有两个线程分别执行下面的代码：</p><table><thead><tr><th align="center">Thread 1</th><th align="center">Thread 2</th></tr></thead><tbody><tr><td align="center">B = 1;</td><td align="center">A = 2;</td></tr><tr><td align="center">r2 = A;</td><td align="center">r1 = B;</td></tr></tbody></table><p><code>A</code>和<code>B</code>都是共享变量，默认值都为零。由于 Thread1 中的两条指令没有相互关联，所以 Java VM 和 CPU 会对它们进行任意排序；同样的 Thread2 中的两条指令也可以任意排序。</p><p>下面是重排序后指令执行的第一种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: B = <span class="number">1</span>;</span><br><span class="line"><span class="number">3</span>: A = <span class="number">2</span>;</span><br><span class="line"><span class="number">2</span>: r2 = A;</span><br><span class="line"><span class="number">4</span>: r1 = B;</span><br></pre></td></tr></table></figure><p>两个线程在交替执行，<code>r2</code>和<code>r1</code>的值都是默认值零；这是因为 3 和 2 之间并不存在 Happens-before 关系，同样的 1 和 4 直接也不存在。可能你还有一个疑问，就是为啥有时候会出现<code>r2</code>的值为 2，<code>r1</code>的值为 1 的情况呢？</p><p>这是一个有趣的情况，这种情况会违背你的直觉；这是因为 Java 内存模型允许<strong>读</strong>操作可以观察到执行顺序中稍后发生的<strong>写</strong>操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: r2 = A;</span><br><span class="line"><span class="number">3</span>: r1 = B;</span><br><span class="line"><span class="number">2</span>: B = <span class="number">1</span>;</span><br><span class="line"><span class="number">4</span>: A = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><code>r2</code>赋值时会读取<code>A</code>的值，但是同时又观察到了<code>A</code>的写操作，所以<code>r2</code>的值为 2，<code>r1</code>也是同样的道理。值得注意的是，这种情况并不属于 Happens-before 关系。</p><blockquote><p>保证了可见性，但是并不保证原子性。原子操作包含了可见性。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.5">17.4.5. Happens-before Order</a></p><p><a href="https://medium.com/@kasunpdh/handling-java-memory-consistency-with-happens-before-relationship-95ddc837ab13">Handling Java Memory Consistency with happens-before relationship</a></p><p><a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/happens-before.html">Java - Understanding Happens-before relationship</a></p><p><a href="http://tutorials.jenkov.com/java-concurrency/java-happens-before-guarantee.html">Java Happens Before Guarantee</a></p><p><a href="https://hardocs.com/d/java-concurrent/article/02/7.html">第七章 重排序与happens-before</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果使用 Java 开发多线程应用程序，那么需要了解如何在 Java 程序中处理共享变量。共享变量就是某个变量被多个线程使用，就像 &lt;a href=&quot;/2021/02/24/synchronization-and-locks/#Thread-Interference&quot;&gt;Sy</summary>
      
    
    
    
    <category term="Java 并发" scheme="https://bytestruct.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Synchronization and Locks</title>
    <link href="https://bytestruct.com/2021/02/24/synchronization-and-locks/"/>
    <id>https://bytestruct.com/2021/02/24/synchronization-and-locks/</id>
    <published>2021-02-24T12:44:25.000Z</published>
    <updated>2021-02-28T09:40:09.432Z</updated>
    
    <content type="html"><![CDATA[<p>如果你刚接触到并发和多线程，那么可以先看一下下面这两篇文章：</p><ul><li><a href="/2021/02/20/processes-and-threads/">进程和线程</a></li><li><a href="/2021/02/20/concurrency-and-parallel/">【番外篇】并发&amp;并行</a></li></ul><blockquote><p>本篇笔记只会说一些基础知识和使用，并不涉及到源码分析。</p></blockquote><p>线程之间的通讯非常有效的方式是使用共享对象，但是可能会导致两种错误：<strong>thread interference</strong> 和 <strong>memory consistency errors</strong>。为了防止这些错误可以使用<code>synchronization</code>。</p><p>然而，<code>synchronization</code>又引入线程竞争，当两个或多个线程试图同时访问同一资源时就会出现，并导致Java运行时更缓慢地执行一个或多个线程，甚至暂停其执行。</p><h2 id="Thread-Interference"><a href="#Thread-Interference" class="headerlink" title="Thread Interference"></a>Thread Interference</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设，<code>线程A</code>调用<code>increment()</code>方法使变量<code>c</code>自加1，线程<code>线程B</code>调用<code>decrement()</code>方法使变量<code>c</code>自减1。</p><p>但是，表达式<code>c++</code>可以分解为三个步骤，<code>c--</code>和<code>c++</code>一样：</p><ol><li>获取<code>c</code>的值。</li><li>将这个值增加1。</li><li>将加1后的值存储到<code>c</code>中。</li></ol><p>当这两个线程使用的都是同一个<code>Counter</code>对象并对<code>c</code>进行操作时就会产生<strong>交错</strong>，这种情况就是<strong>线程干扰</strong>，并会导致数据出错。</p><p>下面列出了交错执行时的一种顺序：</p><ol><li>线程A：获取<code>c</code>的值。</li><li>线程B：获取<code>c</code>的值。</li><li>线程A：将这个值增加1。</li><li>线程B：将这个值递减1。</li><li>线程A：将结果存储在<code>c</code>中；<code>c</code>现在是<code>1</code>。</li><li>线程B：将结果存储在<code>c</code>中；<code>c</code>现在为<code>-1</code>。</li></ol><p>但是这种交错顺序不是唯一的，没有固定顺序，甚至有时候会出现操作执行正确的情况。</p><blockquote><p>简单理解就是：多个线程访问相同数据，操作数据的时候产生了交错；这种情况就是线程干扰。</p></blockquote><h2 id="Memory-Consistency-Errors"><a href="#Memory-Consistency-Errors" class="headerlink" title="Memory Consistency Errors"></a>Memory Consistency Errors</h2><p>线程干扰指的是操作数据的时候，而<strong>内存一致性错误</strong>指的是访问数据的时候。</p><p>假设，<code>线程A</code>调用<code>increment()</code>方法使变量<code>c</code>自加1，线程<code>线程B</code>调用<code>value()</code>方法获取变量<code>c</code>的值。</p><p><code>线程B</code>很有可能获取的值是<code>0</code>，这是因为<code>线程A</code>修改了值，不能保证对<code>线程B</code>是立即可见的。</p><p>除了使用同步解决这个问题外，还可以使用<code>Thread#join</code>方法。</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>Java 编程语言提供了两种基本的同步用法：同步方法和同步代码块。</p><p>要使方法同步，只需将<code>synchronized</code>关键字添加到其声明中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将<code>SynchronizedCounter</code>代替<code>Counter</code>，则使这些方法同步具有两个效果：</p><ul><li>首先，当一个线程正在执行某个同步方法时，会挂起所有调用了这个同步方法的其它线程，直到第一个线程执行完这个方法。这样就解决了代码的<strong>交错</strong>执行。</li><li>其次，当同步方法退出时，后续调用相同对象的同步方法时，它会自动建立一个<code>happens-before</code>关系。这保证了对象状态的更改对所有线程都是可见的。</li></ul><blockquote><p>注意，不能将<code>synchronized</code>关键字与构造方法一起使用。同步构造方法没有任何意义，因为只有在创建对象时，创建对象的线程才可以访问它，其它情况下只是使用该对象的方法。</p></blockquote><p>同步方法提供了一种防止线程干扰和内存一致性错误的简单策略：如果一个对象对一个以上线程可见，则对该对象变量的所有读取或写入均通过<code>synchronized</code>方法完成。</p><h2 id="同步语句"><a href="#同步语句" class="headerlink" title="同步语句"></a>同步语句</h2><p>创建同步代码的另一种方法是使用<strong>同步语句</strong>。与同步方法不同，同步语句必须指定提供<strong>内部锁</strong>的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        lastName = name;</span><br><span class="line">        nameCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    nameList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中，<code>addName</code>方法需要同步对<code>lastName</code>和<code>nameCount</code>做修改，但是要尽量避免在同步语句中调用其他对象的方法；因为这有可能会导致死锁。</p><p>如果想要在一个静态方法中使用同步语句，则可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performStaticSyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(SynchronisedBlocks.class) &#123;</span><br><span class="line">        setStaticCount(getStaticCount() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重进入"><a href="#重进入" class="headerlink" title="重进入"></a>重进入</h2><p>在 Java 中，内部锁本质上都是可重入的。重入就是为了方式线程自身阻塞。</p><h2 id="ReentrantLock-可重入锁"><a href="#ReentrantLock-可重入锁" class="headerlink" title="ReentrantLock(可重入锁)"></a>ReentrantLock(可重入锁)</h2><p><code>ReentrantLock</code>直接实现了<code>Lock</code>接口，和<code>synchronized</code>关键字一样都有线程同步机制；但是它们两个的实现方法不一样，并且前者更强大。</p><p>个人感觉<code>ReentrantLock</code>类是最接近<code>Lock</code>接口的实现。</p><blockquote><p>如果需要它的高级功能，可以使用，否则还是建议使用<code>synchronized</code>。因为这两个的性能一样，<code>synchronized</code>可以自动释放锁，还有就是<code>ReentrantLock</code>实现类没有自适应旋转。</p></blockquote><h2 id="扩展点-Lock-接口"><a href="#扩展点-Lock-接口" class="headerlink" title="扩展点 Lock 接口"></a>扩展点 Lock 接口</h2><p><code>java.util.concurrent.locks.Lock</code>接口的用作类似于<code>synchronized</code>关键字，它们两个都有线程同步的机制。但是实现方式不一样，并且和<code>synchronized</code>相比，<code>Lock</code>更加灵活，主要区别如下：</p><ul><li><p>非块结构：<code>synchronized</code>强制所有获取和释放锁在一个结构块中，而<code>lock()</code>和<code>unlock()</code>可以在不同的结构块中调用。可以将结构快认为是个代码块。</p></li><li><p>顺序保证：<code>synchronized</code>并不会保证让这些等待线程的顺序执行，因为是随机一个线程来获取锁并执行，也就是说它没有<strong>公平性</strong>。但是要注意：公平锁不能保证线程调度的公平性，因为线程调度是操作系统负责。</p></li><li><p>可超时获取锁：没有超时获取锁的功能。<code>Lock</code>接口可以通过<code>tryLock(long timeout，TimeUnit timeUnit)</code>指定超时时间。</p></li><li><p>可中断获取锁：假设线程A 中调用了<code>lock.lockInterruptibly()</code>方法获取锁，当某个线程调用了<code>线程A.interrupt()</code>方法时，则<code>lockInterruptibly()</code>方法会立即抛出<code>InterruptedException</code>异常。<code>interrupt()</code>方法就是<code>Thread#interrupt</code>方法。</p></li></ul><p>除此之外，<code>Lock</code>接口可以通过<code>newCondition()</code>创建<code>Condition</code>实例。</p><blockquote><p>值得注意的是：该接口提供了三种形式的锁获取可中断、不可中断和定时。</p></blockquote><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p><strong>1. 为什么<code>synchronized</code>关键字作用在方法上，就不需要提供内部锁对象？</strong></p><p>无论是静态方法还是实例方法，都可以使用<code>synchronized</code>关键字。当作用在方法上时，它就会自动获取内部锁对象。</p><ul><li>静态方法：当前<code>类的名称.class</code></li><li>实例方法：<code>this</code></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/sync.html">Synchronization</a></p><p><a href="https://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/">Java 8 Concurrency Tutorial: Synchronization and Locks</a></p><p><a href="https://www.baeldung.com/java-synchronized">Guide to the Synchronized Keyword in Java</a></p><p><a href="https://www.tutorialspoint.com/java_concurrency/concurrency_lock.htm">Java Concurrency - Lock Interface</a></p><p><a href="https://knpcode.com/java/concurrency/difference-between-synchronized-and-reentrantlock-in-java/">Synchronized Vs ReentrantLock in Java</a></p><p><a href="https://flylib.com/books/en/2.558.1/choosing_between_synchronized_and_reentrantlock.html">Choosing Between Synchronized and ReentrantLock</a></p><p><a href="https://blog.csdn.net/dongyuxu342719/article/details/94395877">ReentrantLock可中断锁</a></p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果你刚接触到并发和多线程，那么可以先看一下下面这两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2021/02/20/processes-and-threads/&quot;&gt;进程和线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2021/02/20/concurre</summary>
      
    
    
    
    <category term="Java 并发" scheme="https://bytestruct.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【番外篇】并发&amp;并行</title>
    <link href="https://bytestruct.com/2021/02/20/concurrency-and-parallel/"/>
    <id>https://bytestruct.com/2021/02/20/concurrency-and-parallel/</id>
    <published>2021-02-20T15:47:19.000Z</published>
    <updated>2021-02-28T09:39:51.550Z</updated>
    
    <content type="html"><![CDATA[<p>在学习多线程的时候，总是会提到同步、异步、并发、并行等术语，这些术语对于初学者来说晦涩难懂，而且网上的其它文章对此解释的含糊不清；还有就是好多复制粘贴的文章，甚至这些文章连错别字都一样。</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>同步的英文是：Synchronization，根据<a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)">维基百科中对 Synchronization 的解释</a>：同步是指两种不同但相关概念的其中一个：进程同步和数据同步。</p><p>在生产者－消费者关系中，消费者会一直等待生产者的数据。</p><p>分叉和联接：当主任务想快速处理某些数据时，可以分成 N 个子任务；而主任务又会等待所有子任务处理完成，然后主任务再进行其它业务逻辑处理。</p><p><img src="./1611711751.png"></p><p>独家资源使用或者说是排他资源使用：当有多个线程需要访问同一个资源时，其他线程只能等待。</p><p>上面说的这三种是同步的主要需求，下面详细说一下线程或进程同步。</p><h3 id="线程或进程同步"><a href="#线程或进程同步" class="headerlink" title="线程或进程同步"></a>线程或进程同步</h3><p>对于同步来说，我个人认为线程同步和进程同步是一样的。出现这两种说法应该是历史原因，因为操作系统之前的最小调度单位是进程，而随着发展现在变成了线程。所以我觉得只需要知道线程同步就可以了。</p><p>假设有三个线程，即1、2 和 3。这三个线程正在同时执行，并且它们需要访问同一个公共资源，如下图：</p><p><img src="./Multiple_Processes_Accessing_the_shared_resource.png"></p><p>为了防止访问共享资源时产生冲突。因此，当线程 1 和 2 都尝试访问该资源时，必须同一时间只有一个线程能访问。</p><p>如果将其分配给线程 1，则线程 2 需要等待，直到线程 1 释放该资源。</p><blockquote><p>其实可以简单的认为：在多线程环境下，同一时间只有一个线程能访问资源(其它线程会等待)，就可以认为是同步。</p><p>在  Java 中要想实现这种情况，可以使用 <code>synchronized</code> 关键字。</p></blockquote><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>在维基百科中也有对 <a href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)">Asynchrony (computer programming)</a>  的解释，通俗的讲就是：当发生了一个事件的时候，这个事件的处理方式和程序的流程是没有关系的，也就是说程序不会一直等待这个事件处理完。</p><p>例如，当管理员 A 查询所有用户的时候，管理员 B 同时又能对某个用户信息做修改，而不是要等到管理员 A 操作结束后才能修改用户信息。</p><p><img src="./1612106033.png"></p><p>还有就是在<strong>同步</strong>中提到的子任务、线程，这些都是异步。</p><blockquote><p>其实可以简单的认为：只要某一个事件在另一个线程中执行，这就是异步。</p></blockquote><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>假设计算机只有一个 CPU，则应用程序可能无法完全同时完成多个任务，但是在应用程序中一次可能要完成多项任务。为了同时完成多个任务，CPU 在执行期间会<strong>在不同任务之间进行切换</strong>。</p><p>类似下面这张图一会执行 <code>Task1</code> 一会执行 <code>Task2</code>，但是并不会一起执行。</p><p><img src="./concurrency-vs-parallelism-1.png"></p><p>可能你看到这张图的时候会惊呼：这不就是多线程的执行方式吗？</p><p>是的，这就是多线程的执行方式；注意，这里说的是执行方式。多线程并不等于 CPU，多线程指的是同一个程序中有多个执行的线程，这些线程由不同的 CPU 内核处理。</p></br><p><strong>另外值得注意的是：</strong>这里不考虑 CPU 超线程技术，所以上图中的两个任务永远不会同一时间开始执行，<code>Task1</code> 或 <code>Task2</code> 必定有一个先执行。</p><p>通过上面说的这些，我们可以得出三个重点：</p><ol><li>单核 CPU</li><li>两个(多个)任务永远不会同一时间开始执行</li><li>同时完成多个任务</li></ol></br>所以个人理解，并发就是 CPU 执行多任务的一种方式，这些任务交替执行并且大概在相同的时间内完成，但是 CPU 并不是同时执行这些任务。<p>也可以简化为：多个任务交替执行，但是这些任务并不是同时开始执行并且大概在相同时间内完成。<br></br></p></br>下图展示了多线程和 CPU 之间的关系：<p><img src="./introduction-2.png"></p><blockquote><p>这里的 CPU 你可以认为是多核 CPU 中某个核心的一个线程或者就是一个单核的 CPU。这里说 “某个核心的一个线程”，是因为 <strong>超线程</strong> 技术；如果这里只是说某个 CPU 核心，则该核心使用了超线程技术，就有可能会导致两个任务同时开始。<br>可以简单的理解超线程技术：使某个物理内核实现并行计算。超线程技术我也不是很理解，就知道能并行计算。</p></blockquote><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>先说一下，并发和并行是不一样的。</p><p>并行执行是指，计算机有多个 CPU 或一个 CPU 有多个核心，<strong>同时执行多个任务</strong>。但是，并行执行不等于并行性。</p><p>并行执行如下图所示：</p><p><img src="./concurrency-vs-parallelism-2.png"></p><h2 id="并行并发执行"><a href="#并行并发执行" class="headerlink" title="并行并发执行"></a>并行并发执行</h2><p>根据 CPU 上分布的不同任务，得出的结论就是：在同一 CPU 上执行的任务是并发执行的，而在不同 CPU 上执行的线程是并行执行的。</p><p><img src="./concurrency-vs-parallelism-3.png"></p><h2 id="并行性"><a href="#并行性" class="headerlink" title="并行性"></a>并行性</h2><p>假设现在有一个比较复杂的任务，我们把这个复杂的任务拆分成 4 个子任务，然后将这 4 个子任务分别由 4 个不同的线程执行，并且这些线程分别运行在 2 个不同的 CPU 上。</p><p>这意味着，这些子任务的一部分是并发执行的(在同一 CPU 上执行的)，而另一部分是并行执行的(在不同 CPU 上执行的)。</p><p><img src="./concurrency-vs-parallelism-4.png"></p><p>如果这4个子任务是由在各自的CPU上运行的4个线程执行的(总共4个CPU)，那么任务执行应该是完全并行的。</p><p>然而，将一个任务分解为与可用cpu数量完全相同的子任务并不总是容易的</p><p>通常，更容易的做法是将一个任务分解为一些自然适合手头任务的子任务，然后让线程调度程序负责将线程分配到可用的cpu中。</p><blockquote><p>并行性和<strong>并行并发执行</strong>看起来很相似，但是术语并行性是指应用程序将某个任务分解为较小的子任务，这些子任务可以并行处理。</p><p>我个人认为，并行性是在应用程序中的说法，并发和并行是在 CPU 中的说法。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)#The_need_for_synchronization">Synchronization (computer science)</a></p><p><a href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)">Asynchrony (computer programming)</a></p><p><a href="http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html">Concurrency vs. Parallelism</a></p><p><a href="https://www.monades.dev/concurrency-is-different-than-parallelism/">Concurrency != Parallelism</a></p><p><a href="https://luminousmen.com/post/concurrency-and-parallelism-are-different">Concurrency and parallelism are two different things</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学习多线程的时候，总是会提到同步、异步、并发、并行等术语，这些术语对于初学者来说晦涩难懂，而且网上的其它文章对此解释的含糊不清；还有就是好多复制粘贴的文章，甚至这些文章连错别字都一样。&lt;/p&gt;
&lt;h2 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Java 并发" scheme="https://bytestruct.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程基础</title>
    <link href="https://bytestruct.com/2021/02/20/java-thread-base/"/>
    <id>https://bytestruct.com/2021/02/20/java-thread-base/</id>
    <published>2021-02-20T13:40:01.000Z</published>
    <updated>2021-02-28T09:39:57.165Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中线程的生命周期和线程的状态可以理解为：在其生命周期中，线程会经历各种状态。</p><p>类似于下面这张图是最常见的：</p><p><img src="./Life_cycle_of_a_Thread_in_Java.jpg" alt="Thread status"></p><p>使用 <code>new Thread</code> 创建出来的线程就是 <code>NEW</code> 状态，这个时候线程并没有启动；当调用 <code>start()</code> 方法时，线程状态就会变成 <code>RUNNABLE</code> 状态。</p><p>当 t1 获得锁，t2 会等待 t1 释放锁，这个时候 t2 线程的状态就是 <code>BLOCKED</code> 阻塞状态。</p><p>当调用了线程的 <code>Object#wait()</code>、<code>Thread#join()</code> 或 <code>LockSupport#park()</code> 方法时，就会变成 <code>WAITTING</code> 状态；如果调用的是带有超时参数的就会变成 <code>TIMED_WAITTING</code> 状态。</p><p>线程执行结束就是 <code>TERMINATED</code> 状态。</p><p>在 Java 中线程一共就分为 6 种状态并且可以通过 <code>state()</code> 方法查看线程状态。</p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面是 Java 创建一个线程的例子，下面代码展示了这个线程具体是怎么创建的，<code>Thread</code> 构造方法最终都会调用 <code>init</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 每一个线程必须有一个名字，默认的线程名称是：Thread- 加上线程ID。 */</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 假设在线程 A 中，调用了 new Thread 创建了线程 B。</span></span><br><span class="line"><span class="comment">       这里获取线程 A 是为了，将线程 A 的一些配置传递给线程 B。*/</span></span><br><span class="line">    Thread parent = currentThread();</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 每一个线程必须有一个线程组，如果没有指定则会先获取安全管理器中的线程组，否则再回去父级(线程A)线程组。 */</span></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = security.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = parent.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断当前线程(线程A) 有没有操作线程组的权限，如果没有就会抛出 SecurityException。</span></span><br><span class="line"><span class="comment">       因为 Thread#start() 方法会操作线程组。*/</span></span><br><span class="line">    g.checkAccess();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* 主要用来判断子类有没有重写 getContextClassLoader 和 setContextClassLoader 方法，如果重写了则返回 true。*/</span></span><br><span class="line">        <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">            <span class="comment">/* 既然重写了那么就判断一下有没有重写权限(enableContextClassLoaderOverride)，如果没有则抛出 SecurityException。*/</span></span><br><span class="line">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 将线程组中的 未启动线程 变量加 1。*/</span></span><br><span class="line">    g.addUnstarted();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.group = g;</span><br><span class="line">    <span class="keyword">this</span>.daemon = parent.isDaemon();</span><br><span class="line">    <span class="keyword">this</span>.priority = parent.getPriority();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果重写了就调用子类的 getContextClassLoader() 方法，否则就直接获取父类的 ClassLoader 就可以了。*/</span></span><br><span class="line">    <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 我也不清楚为什么要获取这个。*/</span></span><br><span class="line">    <span class="keyword">this</span>.inheritedAccessControlContext = acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置线程优先级。*/</span></span><br><span class="line">    setPriority(priority);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 继承父级的 ThreadLocal.ThreadLocalMap。</span></span><br><span class="line"><span class="comment">       当然自己的线程数据可以放到 ThreadLocal.ThreadLocalMap threadLocals 中。*/</span></span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line"></span><br><span class="line">    tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init-方法中的相关方法"><a href="#init-方法中的相关方法" class="headerlink" title="init 方法中的相关方法"></a>init 方法中的相关方法</h3><p><code>currentThread()</code> 是一个本地方法，下面是 JVM 的源码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>这里先挖坑。</p><h2 id="拓展知识点-Runnable-接口"><a href="#拓展知识点-Runnable-接口" class="headerlink" title="拓展知识点 Runnable 接口"></a>拓展知识点 Runnable 接口</h2><p><code>Runnable</code> 这个接口可以理解成线程的任务接口，它里面只有一个无参的 <code>run</code> 方法，线程启动后就会执行这个方法中的代码。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p><strong>1. Thread 为什么要实现 Runnable 接口？</strong></p><p>当线程启动后就会执行 <code>Runnable#run</code> 方法，这里实现该接口是为了，当没有传递接口实例的时候，也可以保证线程正常运行。</p><p>只不过这里的运行只是线程空转一次。</p><p><strong>2. 为什么要传递线程配置？</strong></p><p><strong>3. 当线程状态是 NEW 的时候，操作系统有没有启动线程？</strong></p><p>首先 Java 线程就是操作系统线程，</p><p><strong>4. 为什么要弃用 stop()、suspend()、resume() 方法？</strong></p><p>当调用 <code>Thread#stop()</code> 方法时，就会将线程持有的锁立即释放掉，其它线程所看到的状态就会不一样。</p><p><strong>5. 为什么 wait 在 Object 中？</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.baeldung.com/java-thread-lifecycle">Life Cycle of a Thread in Java</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java 中线程的生命周期和线程的状态可以理解为：在其生命周期中，线程会经历各种状态。&lt;/p&gt;
&lt;p&gt;类似于下面这张图是最常见的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./Life_cycle_of_a_Thread_in_Java.jpg&quot; alt=&quot;Thread stat</summary>
      
    
    
    
    <category term="Java 并发" scheme="https://bytestruct.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="https://bytestruct.com/2021/02/20/processes-and-threads/"/>
    <id>https://bytestruct.com/2021/02/20/processes-and-threads/</id>
    <published>2021-02-20T08:59:58.000Z</published>
    <updated>2021-02-28T09:40:01.649Z</updated>
    
    <content type="html"><![CDATA[<p>很多同学都听说过，现代操作系统比如 Mac OS X，UNIX，Linux，Windows 等，都是支持 “多任务” 的操作系统。</p><p>什么叫 “多任务” 呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听 MP3，一边在用 Word 赶作业，这就是多任务。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。</p><p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p><p>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p><p>也就是说，一个程序就是一个进程。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>比如 Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p><p>由于每个进程至少要干一件事，所以，<strong>一个进程至少有一个线程</strong>。当然，像 Word 这种复杂的进程可以有多个线程，多个线程可以同时执行，多线程的执行方式和多进程是一样的，也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样。当然，真正地同时执行多线程需要多核 CPU 才可能实现。</p><p>也就是说，可以把进程理解成一个容器，里面可能有很多个线程帮我们做不同的事情。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376">进程和线程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多同学都听说过，现代操作系统比如 Mac OS X，UNIX，Linux，Windows 等，都是支持 “多任务” 的操作系统。&lt;/p&gt;
&lt;p&gt;什么叫 “多任务” 呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听 MP3，一边在用 </summary>
      
    
    
    
    <category term="操作系统" scheme="https://bytestruct.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Java" scheme="https://bytestruct.com/tags/Java/"/>
    
  </entry>
  
</feed>
